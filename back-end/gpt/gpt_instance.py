import os
import openai
from constants import *

openai.organization = GPT_ORGANIZATION_KEY
openai.api_key = GPT_API_KEY
ENGINE = GPT_ENGINE

class GPTInstance:
    def __init__(self, instance_id, instance_name, instance_traits=None, instance_hobbies=None, instance_desc=None, instance_misc=None):
        
        assert(isinstance(instance_traits, list))
        assert(isinstance(instance_hobbies, list))
        
        # GPT Instance Attributes
        self.id          = instance_id
        self.name        = instance_name
        self.traits      = instance_traits
        self.hobbies     = instance_hobbies
        self.description = instance_desc
        self.misc        = instance_misc
        self.full_desc   = self.__generate_character_full_desc()
        
        # GPT Instance Data Records
        self.message_records = []
        
    
    def __get_str_hobbies(self):
        str_hobbies = ", ".join(self.hobbies)
        idx = str_hobbies.rfind(",")
        str_hobbies = str_hobbies[:idx+1] + " and" + str_hobbies[idx+1:]
        return str_hobbies
    
    
    def __get_str_traits(self):
        str_traits = ", ".join(self.traits)
        idx = str_traits.rfind(",")
        str_traits = str_traits[:idx+1] + " and" + str_traits[idx+1:]
        return str_traits
    
    
    def __generate_character_full_desc(self):
        return self.__format_stab(CHARACTER_DESC_STAB)
        
        
    def __format_stab(self, given_stab):
        res = given_stab                     \
            .replace("<name>", self.name)                   \
            .replace("<description>", self.description)     \
            .replace("<hobbies>", self.__get_str_hobbies()) \
            .replace("<traits>", self.__get_str_traits())
        return res
    

    def train(self, friends_desc: list):
        """
        Train GPT instance based on the given configurations.
        
        openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Who won the world series in 2020?"},
                {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
                {"role": "user", "content": "Where was it played?"}
            ]
        )
        """
        
        print("CALLED --")
        assert(isinstance(friends_desc, list))
        
        training_stab = self.__format_stab(TRAINING_STAB)
        for desc in friends_desc:
            training_stab = training_stab.replace("<others_description>", desc)
        self.__user_message(training_stab)
        
        # try:
        #     questions = TRAINING_EXAMPLES["user"]
        #     answers   = TRAINING_EXAMPLES["assistant"]
        #     assert(len(questions) == len(answers))
        # except:
        #     pass
        
        # for i in range(len(questions)):
        #     q = self.__format_stab(questions[i])
        #     self.__user_message(q)
            
        #     a = self.__format_stab(answers[i])
        #     self.__assistant_message(a)
        
        
        return training_stab
        # first = True
        # while True:
        #     if not first:
        #         message = input("INPUT: ")
        #         self.message_records.append(self.__user_message(message))
        #     first = False
            
        #     print("/////// Waiting for reply...\n")
        #     response = openai.ChatCompletion.create(
        #         model=ENGINE,
        #         messages=self.message_records
        #     )
            
        #     reply = response["choices"][0]["message"]["content"]
        #     self.message_records.append(self.__assistant_message(reply))
        #     print(reply)
        #     print("\n===============================================================")
        
    
    def __system_message(self, message):
        """
        The system message helps set the behavior of the assistant. 
        The assistant can be instructed with "You are a helpful assistant."
        """
        gpt_message = {"role": "system", "content": message}
        self.message_records.append(gpt_message)
        return gpt_message
    
    
    def __user_message(self, message):
        """
        The user messages help instruct the assistant.
        They can be generated by the end users of an application, or set by a developer as an instruction.
        """
        gpt_message = {"role": "user", "content": message}
        self.message_records.append(gpt_message)
        return gpt_message
    
    
    def __assistant_message(self, message):
        """
        The assistant messages help store prior responses. 
        They can help give examples of desired behavior.
        """
        gpt_message = {"role": "assistant", "content": message}
        self.message_records.append(gpt_message)
        return gpt_message
        

# messages = []
# system_msg = input("What type of chatbot would you like to create? ")
# messages.append({"role": "system", "content": system_msg})

# print("Say hello to your new assistant!")
# while input != "quit()":
#     message = input()
#     messages.append({"role": "user", "content": message})
    
#     response = openai.ChatCompletion.create(
#         model=ENGINE,
#         messages=messages
#     )
    
#     reply = response
#     messages.append({"role": "assistant", "content": reply})
#     print(reply)
    
#     exit()


if __name__ == "__main__":
    instance = GPTInstance(
        instance_id="C0", 
        instance_name="Elaina Frost", 
        instance_traits=[
                "friendly",
                "honest",
                "diligent"
            ],
        instance_hobbies=[
                "violin",
                "painting water color",
                "hiking"
            ],
        instance_desc="First-year Biology major university student at High Tech University. Minored in Art and Design."
    )
    
    instance2 = GPTInstance(
        instance_id="C1", 
        instance_name="Sarah Anderson", 
        instance_traits=[
                "inspirational",
                "caring",
                "decisive"
            ],
        instance_hobbies=[
                "cooking",
                "video games",
                "puzzles"
            ],
        instance_desc="First-year Food and Cooking major university student at High Tech University."
    )
    
    # print(instance2.full_desc)
    
    print(instance.train(friends_desc=[instance2.full_desc]))